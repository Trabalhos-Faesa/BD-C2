# $ docker compose up -d --build
# $ docker compose up -d grafana

services:
  app:
    build: .
    container_name: app
    # depends_on: [redis, grafana]
    depends_on: [grafana]
    ports: ["8000:8000"]
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    networks:
      - reverse-proxy
      - monitoring
    env_file:
      - path: ./.env
        required: false

  postgres:
    image: postgres:17-alpine
    container_name: postgres
    ports: ["5432:5432"]
    restart: on-failure:3
    shm_size: 128mb
    env_file:
      - path: ./postgres.env
        required: false
    # environment:
    #   # - POSTGRES_INITDB_ARGS="--locale-provider=icu --icu-locale=pt-BR"
    #   # XXX: use the ./postgres.env
    #   # - POSTGRES_USER=postgres
    #   - POSTGRES_PASSWORD=postgres
    #   # - POSTGRES_DB=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # redis:
  #   image: redis:6.0.14
  #   container_name: redis
  #   ports: ["6379:6379"]
  #   restart: on-failure:3
  #   env_file:
  #     - path: ./redis.env
  #       required: false
  #   entrypoint: ["sh", "-c", 'redis-server --appendonly yes --requirepass "$${REDIS_PASSWORD}"']
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - reverse-proxy
  #     - monitoring

  # TODO: postgres_exporter

  # redis_exporter:
  #   image: oliver006/redis_exporter:v1.78.0-alpine
  #   container_name: redis_exporter
  #   depends_on: [redis]
  #   ports: ["9121:9121"]
  #   restart: on-failure:3
  #   env_file:
  #     - path: ./redis.env
  #       required: false
  #   environment:
  #     - REDIS_ADDR=redis://redis:6379
  #   networks:
  #     - monitoring

  # nginx:
  #   image: nginx:stable
  #   container_name: nginx
  #   depends_on: [app]
  #   ports: ["8080:80"]
  #   networks:
  #     - reverse-proxy
  #   volumes:
  #     - "./infra/nginx/nginx.conf:/etc/nginx/conf.d/default.conf"

  tempo:
    image: grafana/tempo:2.8.2
    container_name: tempo
    ports:
      - "3200:3200"  # Tempo
      # - "9095:9095"  # Tempo gRPC
      # - "4317:4317"  # OTLP gRPC
      # - "4318:4318"  # OTLP HTTP
      # - "14268:14268"  # Jaeger Ingest
    restart: on-failure:3
    environment:
      - PROMETHEUS_HOST=prometheus
      - PROMETHEUS_PORT=9090
    command:
      - -config.file=/etc/tempo.yaml
      - "-config.expand-env=true"  # To use env-vars PROMETHEUS_HOST and PROMETHEUS_PORT
    volumes:
      - ./infra/tempo/tempo.yaml:/etc/tempo.yaml:ro
      - tempo_data:/var/tempo
    networks:
      - monitoring

  node_exporter:
    image: quay.io/prometheus/node-exporter:v1.9.1
    container_name: node_exporter
    ports: ["9100:9100"]
    restart: on-failure:3
    # network_mode: host
    # pid: host
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      # - "/:/host:ro,rslave"
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --path.rootfs=/rootfs
      # - --path.rootfs=/host
      # https://github.com/prometheus/node_exporter?tab=readme-ov-file#collectors
      # https://grafana.com/docs/grafana-cloud/send-data/metrics/metrics-prometheus/prometheus-config-examples/docker-compose-linux/#step-1-create-the-compose-file
      # To avoid: node_exporter ERROR source=http.go msg="error gathering metrics"[...]"was collected before with the same name and label values"
      - '--collector.filesystem.mount-points-exclude=^/(dev|proc|sys|run/user|var/lib/docker/.+|var/lib/kubelet/.+)($|/)'
    networks:
      - monitoring

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.52.0  # v0.53.0
    container_name: cadvisor
    ports: ["8081:8080"]
    restart: on-failure:3
    command:
      # https://github.com/google/cadvisor/blob/master/docs/runtime_options.md
      # - "--port=8081"  # Default: 8080
      - "--docker_only=true"
    privileged: true
    devices:
      - /dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:v3.5.0
    container_name: prometheus
    # depends_on: [node_exporter, redis_exporter, cadvisor]  # XXX: it's not necessary for prometheus
    depends_on: [node_exporter, cadvisor]  # XXX: it's not necessary for prometheus
    ports: ["9090:9090"]
    restart: on-failure:3
    command:
      # https://prometheus.io/docs/prometheus/latest/command-line/prometheus/
      - --config.file=/etc/prometheus/prometheus.yml
      # - --log.level=info  # debug, info, warn, error
      - --storage.tsdb.path=/prometheus
      # - --storage.tsdb.retention.time=15d
      # - --storage.tsdb.retention.size=1GB
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
      - "--web.enable-lifecycle"  # https://prometheus.io/docs/prometheus/latest/management_api/
      # - --web.enable-admin-api
      - --web.enable-remote-write-receiver
      - --web.enable-otlp-receiver
      # https://prometheus.io/docs/prometheus/3.5/feature_flags/
      - "--enable-feature=exemplar-storage"
      # - "--enable-feature=otlp-deltatocumulative"
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      # - ./infra/prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    networks:
      - monitoring

  loki:
    image: grafana/loki:3.5.3
    container_name: loki
    ports: ["3100:3100"]
    restart: on-failure:3
    command:
      - -config.file=/etc/loki/loki.yaml
      - -print-config-stderr
      # - -log-config-reverse-order
      # -config.expand-env=true
    volumes:
      - ./infra/loki/loki.yaml:/etc/loki/loki.yaml:ro
      - loki_data:/loki
    networks:
      - monitoring

  alloy:
    image: grafana/alloy:v1.10.2
    container_name: alloy
    depends_on: [tempo, prometheus, loki]
    ports:
      - "12345:12345"  # Alloy UI
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP
    restart: on-failure:3
    command:
      # https://grafana.com/docs/alloy/latest/reference/cli/run/
      - run
      - --server.http.listen-addr=0.0.0.0:12345
      - --storage.path=/var/lib/alloy/data
      - /etc/alloy/config.alloy
    volumes:
      - ./infra/alloy/config.alloy:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - alloy_data:/var/lib/alloy/data
    networks:
      - monitoring

  # TODO: Pyroscope and Alertmanager

  grafana:
    image: grafana/grafana:12.1
    container_name: grafana
    depends_on: [alloy]
    ports: ["3000:3000"]
    restart: on-failure:3
    env_file:
      - path: ./grafana.env
        required: false
    environment:
      - GF_SECURITY_ADMIN_USER=admin  # XXX: grafana.env
      - GF_SECURITY_ADMIN_PASSWORD=admin  # XXX: grafana.env
      - GF_USERS_DEFAULT_THEME=light
    volumes:
      - grafana_data:/var/lib/grafana
      - "./infra/grafana/provisioning/:/etc/grafana/provisioning/"
    networks:
      - monitoring

networks:
  reverse-proxy:
    # driver: overlay
  monitoring:
    # driver: bridge

volumes:
  postgres_data:
    # driver: local
    # driver_opts:
    #   o: bind
    #   type: none
    #   device: ./volumes/postgres_data/
  # redis_data:
  #   # driver: local
  #   # driver_opts:
  #   #   o: bind
  #   #   type: none
  #   #   device: ./volumes/redis_data/
  grafana_data:
    # driver: local
    # driver_opts:
    #   o: bind
    #   type: none
    #   device: ./volumes/grafana_data/
  tempo_data:
    # driver: local
    # driver_opts:
    #   o: bind
    #   type: none
    #   device: ./volumes/tempo_data/
  prometheus_data:
    # driver: local
    # driver_opts:
    #   o: bind
    #   type: none
    #   device: ./volumes/prometheus_data/
  loki_data:
    # driver: local
    # driver_opts:
    #   o: bind
    #   type: none
    #   device: ./volumes/loki_data/
  alloy_data:
    # driver: local
    # driver_opts:
    #   o: bind
    #   type: none
    #   device: ./volumes/alloy_data/
